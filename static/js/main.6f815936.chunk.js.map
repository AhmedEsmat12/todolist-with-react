{"version":3,"sources":["component/Todeitem/Todoitem.js","component/Additem/Additem.js","App.js","serviceWorker.js","index.js"],"names":["Todoitem","props","item","items","deleteItems","todolist","length","map","react_default","a","createElement","key","id","className","name","age","onClick","Additem","state","chValue","e","_this","setState","Object","defineProperty","target","value","suValue","preventDefault","addItem","onSubmit","this","type","placeholder","onChange","Component","App","r","findIndex","splice","ee","Math","random","push","component_Todeitem_Todoitem","component_Additem_Additem","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OA2BeA,SAzBC,SAACC,GAEb,IAAMC,EAAKD,EAAME,MACXC,EAAYH,EAAMG,YAElBC,EADIH,EAAKI,OACKJ,EAAKK,IAAI,SAACL,GAC1B,OACIM,EAAAC,EAAAC,cAAA,OAAKC,IAAKT,EAAKU,IACXJ,EAAAC,EAAAC,cAAA,QAAMG,UAAU,QAAQX,EAAKY,KAA7B,KACAN,EAAAC,EAAAC,cAAA,QAAMG,UAAU,OAAOX,EAAKa,KAC5BP,EAAAC,EAAAC,cAAA,QAAMG,UAAU,SAASG,QAAS,kBAAIZ,EAAYF,EAAKU,MAAvD,WAGRJ,EAAAC,EAAAC,cAAA,gCACJ,OACIF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACXL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,WAAhB,QACAL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,UAAhB,OACAL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,aAAhB,WAEHR,YCWEY,oNA9BXC,MAAM,CACFJ,KAAK,GACLC,IAAI,MAERI,QAAQ,SAACC,GACLC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOb,GAAIQ,EAAEK,OAAOC,WAG/BC,QAAQ,SAACP,GAELA,EAAEQ,iBACFP,EAAKpB,MAAM4B,QAAQR,EAAKH,OACxBG,EAAKC,SAAS,CACVR,KAAK,GACLC,IAAI,8EAIR,OACIP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,QAAMoB,SAAUC,KAAKJ,SACjBnB,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOC,YAAY,kBAAkBrB,GAAG,OAAOsB,SAAUH,KAAKZ,QAASO,MAAOK,KAAKb,MAAMJ,OACrGN,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOC,YAAY,iBAAiBrB,GAAG,MAAMsB,SAAUH,KAAKZ,QAASO,MAAOK,KAAKb,MAAMH,MACnGP,EAAAC,EAAAC,cAAA,UAAQG,UAAU,KAAlB,gBA1BIsB,cC+CPC,6MA7CblB,MAAM,CACJf,MAAM,CACF,CAACS,GAAG,EAAEE,KAAK,QAAQC,IAAI,IACvB,CAACH,GAAG,EAAEE,KAAK,UAAUC,IAAI,IACzB,CAACH,GAAG,EAAEE,KAAK,QAAQC,IAAI,QAG7BX,YAAa,SAACQ,GAQd,IAAIT,EAAMkB,EAAKH,MAAMf,MACjBkC,EAAElC,EAAMmC,UAAU,SAAApC,GAAI,OAAEA,EAAKU,KAAKA,IACtCT,EAAMoC,OAAOF,EAAE,GACfhB,EAAKC,SAAS,CACZnB,MAAMA,OAIR0B,QAAQ,SAACW,GAEPA,EAAG5B,GAAG6B,KAAKC,SACX,IAAMvC,EAAMkB,EAAKH,MAAMf,MACvBA,EAAMwC,KAAKH,GACXnB,EAAKC,SAAS,CACZnB,MAAMA,6EAIV,OACEK,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACfL,EAAAC,EAAAC,cAACkC,EAAD,CAAUzC,MAAO4B,KAAKb,MAAMf,MAAOC,YAAa2B,KAAK3B,cACrDI,EAAAC,EAAAC,cAACmC,EAAD,CAAShB,QAASE,KAAKF,mBAvCXM,aCSEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6f815936.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport './Todoitem.css'\r\n const Todoitem=(props)=>\r\n{\r\n    const item=props.items;\r\n    const deleteItems=props.deleteItems;\r\n    const len=item.length;\r\n    const todolist=len?(item.map((item)=>{\r\n        return(\r\n            <div key={item.id}>\r\n                <span className=\"name\">{item.name} </span>\r\n                <span className=\"age\">{item.age}</span>\r\n                <span className=\"action\" onClick={()=>deleteItems(item.id)}>&times;</span>\r\n            </div>\r\n        )\r\n    })):<span>no item to show </span>\r\n    return(\r\n        <div className=\"todoitem\">\r\n            <div>\r\n                <span className=\"name te\">name</span>\r\n                <span className=\"age te\">age</span>\r\n                <span className=\"action te\">action</span>\r\n            </div>\r\n            {todolist}\r\n        </div>\r\n    )\r\n}\r\nexport default Todoitem;","import React,{Component} from 'react'\r\nimport './Additem.css'\r\nclass Additem extends Component\r\n{\r\n    state={\r\n        name:\"\",\r\n        age:\"\"\r\n    }\r\n    chValue=(e)=>{\r\n        this.setState({\r\n            [e.target.id]:e.target.value\r\n        })\r\n    }\r\n    suValue=(e)=>\r\n    {\r\n        e.preventDefault();\r\n        this.props.addItem(this.state);\r\n        this.setState({\r\n            name:\"\",\r\n            age:\"\"\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"additem\">\r\n              <form onSubmit={this.suValue}>\r\n                  <input type=\"text\" placeholder=\"enter your name\" id=\"name\" onChange={this.chValue} value={this.state.name} />\r\n                  <input type=\"text\" placeholder=\"enter your age\" id=\"age\" onChange={this.chValue} value={this.state.age}/>\r\n                  <button className=\"w\">add</button>\r\n              </form>\r\n                </div>\r\n        )\r\n    }\r\n}\r\nexport default Additem","import React,{Component} from 'react';\nimport Todoitem from './component/Todeitem/Todoitem'\nimport Additem from './component/Additem/Additem'\nclass App extends Component {\n  state={\n    items:[\n        {id:1,name:\"ahmed\",age:21},\n        {id:2,name:\"mohamed\",age:25},\n        {id:3,name:\"esmat\",age:30}\n    ]\n  }\n  deleteItems =(id)=>\n  {\n  // let items=this.state.items.filter(item=>\n  //   {\n  //     return(\n  //           item.id!=id\n  //     )\n  //   });\n  let items=this.state.items;\n  let r=items.findIndex(item=>item.id===id);\n  items.splice(r,1)\n  this.setState({\n    items:items\n  }\n  )\n  }\n  addItem=(ee)=>\n  {\n    ee.id=Math.random();\n    const items=this.state.items;\n    items.push(ee);\n    this.setState({\n      items:items\n    })\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <h1>Todo List</h1>\n      <div className=\"main\">\n      <Todoitem items={this.state.items} deleteItems={this.deleteItems} />\n      <Additem addItem={this.addItem} />\n      </div>\n    </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}